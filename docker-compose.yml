version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
       KAFKA_BROKER_ID: 1
       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
      image: provectuslabs/kafka-ui:latest
      depends_on:
        - kafka
      ports:
        - 8090:8080
      environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
        KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - 1025:1025  # SMTP server
      - 8025:8025  # MailHog web interface

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  setup_permissions:
    image: alpine
    entrypoint: sh -c "chown -R 1000:0 /keycloak"
    volumes:
      - keycloak:/keycloak
    command: "tail -f /dev/null"  # Keeps the container running

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.2

    ports:
      - "8181:8080"
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - keycloak:/opt/keycloak/data/h2
    command: "start-dev --http-relative-path /auth"
    depends_on:
      - keycloak-mysql


  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: juliparodi
      POSTGRES_PASSWORD: ${POSTGRE_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped

  mysql-order:
    container_name: mysql-inventory
    image: mysql
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_USER: juliparodi
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./mysql-order:/var/lib/mysql
    expose:
      - "3306"
    ports:
      - "3306:3306"
    restart: unless-stopped


  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: julianparodi19
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./mongo-data:/data/db

#TECH MARKET MICROSERVICES
  discovery-service:
    image: juliparodi/techmarket:discovery-service
    container_name: discovery-service
    pull_policy: always
    hostname: discovery-service
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
    depends_on:
      - zipkin

  api-gateway:
    image: juliparodi/techmarket:api-gateway
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
    depends_on:
      - zipkin
      - discovery-service
      - keycloak

  product-service:
    container_name: product-service
    pull_policy: always
    image: juliparodi/techmarket:product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
    depends_on:
      - mongo
      - discovery-service
      - api-gateway


  order-service:
    container_name: order-service
    image: juliparodi/techmarket:order-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
    depends_on:
      - mysql-order
      - kafka
      - zipkin
      - discovery-service
      - api-gateway

  inventory-service:
    container_name: inventory-service
    pull_policy: always
    image: juliparodi/techmarket:inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5431/inventory-service
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
    depends_on:
      - postgres-inventory
      - discovery-service
      - api-gateway

  notification-service:
    container_name: notification-service
    pull_policy: always
    image: juliparodi/techmarket:notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
    depends_on:
      - zipkin
      - kafka
      - discovery-service
      - api-gateway
      - mailhog


    ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password


volumes:
  keycloak:
